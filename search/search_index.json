{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"hello while true; do curl 10.8.8.204; sleep 1; echo \"\\n\"; done","title":"hello"},{"location":"#hello","text":"while true; do curl 10.8.8.204; sleep 1; echo \"\\n\"; done","title":"hello"},{"location":"Firewall/","text":"#!/bin/bash export IPT=\"iptables\" # \u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 export WAN=enp1s0 export WAN_IP=pub_ip/27 # \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0435\u0442\u044c export LAN1=enp1s0:1 export LAN1_IP_RANGE=10.10.0.0/24 #export LAN2=mgmt11 #export LAN2_IP_RANGE=172.16.0.0/28 #export LAN3=wlxe84e063c9d5f #export LAN3_IP_RANGE=192.168.43.0/24 # \u041e\u0447\u0438\u0449\u0430\u0435\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u0430 $IPT -F $IPT -F -t nat $IPT -F -t mangle $IPT -X $IPT -t nat -X $IPT -t mangle -X # \u0417\u0430\u043f\u0440\u0435\u0449\u0430\u0435\u043c \u0432\u0441\u0435, \u0447\u0442\u043e \u043d\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e $IPT -P INPUT DROP $IPT -P OUTPUT DROP $IPT -P FORWARD DROP # \u0420\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u043c localhost \u0438 \u043b\u043e\u043a\u0430\u043b\u043a\u0443 $IPT -A INPUT -i lo -j ACCEPT $IPT -A INPUT -i $LAN1 -j ACCEPT #$IPT -A INPUT -i $LAN2 -j ACCEPT $IPT -A OUTPUT -o lo -j ACCEPT $IPT -A OUTPUT -o $LAN1 -j ACCEPT #$IPT -A OUTPUT -o $LAN2 -j ACCEPT # \u0420\u0437\u0440\u0435\u0448\u0430\u0435\u043c \u043f\u0438\u043d\u0433\u0438 $IPT -A INPUT -p icmp --icmp-type echo-reply -j ACCEPT $IPT -A INPUT -p icmp --icmp-type destination-unreachable -j ACCEPT $IPT -A INPUT -p icmp --icmp-type time-exceeded -j ACCEPT $IPT -A INPUT -p icmp --icmp-type echo-request -j ACCEPT # \u0420\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u043c \u0432\u0441\u0435 \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 $IPT -A OUTPUT -o $WAN -j ACCEPT #$IPT -A OUTPUT -o $LAN3 -j ACCEPT # \u0420\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u043c \u0432\u0441\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 $IPT -A INPUT -i $WAN -j ACCEPT #$IPT -A OUTPUT -o $LAN3 -j ACCEPT # \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u043c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f $IPT -A INPUT -p all -m state --state ESTABLISHED,RELATED -j ACCEPT $IPT -A OUTPUT -p all -m state --state ESTABLISHED,RELATED -j ACCEPT $IPT -A FORWARD -p all -m state --state ESTABLISHED,RELATED -j ACCEPT # \u041e\u0442\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u043c \u043d\u0435\u043e\u043f\u043e\u0437\u043d\u0430\u043d\u043d\u044b\u0435 \u043f\u0430\u043a\u0435\u0442\u044b $IPT -A INPUT -m state --state INVALID -j DROP $IPT -A FORWARD -m state --state INVALID -j DROP # \u041e\u0442\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u043c \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u043f\u0430\u043a\u0435\u0442\u044b $IPT -A INPUT -p tcp --tcp-flags ALL NONE -j DROP # \u0417\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c\u0441\u044f \u043e\u0442 syn-flood \u0430\u0442\u0430\u043a $IPT -A INPUT -p tcp ! --syn -m state --state NEW -j DROP $IPT -A OUTPUT -p tcp ! --syn -m state --state NEW -j DROP # \u0411\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u043c \u0434\u043e\u0441\u0442\u0443\u043f \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0430\u0434\u0440\u0435\u0441\u043e\u0432 #$IPT -A INPUT -s 84.122.21.197 -j REJECT # \u041f\u0440\u043e\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u043c \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u043f\u043e\u0440\u0442 23543 \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u0438 \u043f\u043e\u0440\u0442 3389 #$IPT -t nat -A PREROUTING -p tcp --dport 21 -i ${WAN} -j DNAT --to 10.10.0.3:21 #$IPT -A FORWARD -i $WAN -d 10.10.0.3 -j ACCEPT #iptables -t nat -A PREROUTING -p tcp -d 188.130.155.52 --dport 21 -j DNAT --to-destination 10.10.0.3:21 #iptables -A FORWARD -i $WAN -d 10.10.0.3 -p tcp --dport 21 -j ACCEPT #$IPT -t nat -A PREROUTING -p tcp -d 188.130.155.52 --dport 49152:65534 -j DNAT --to-destination 10.10.0.3:49152-65534 #$IPT -A FORWARD -i $WAN -d 10.10.0.3 -p tcp --dport 49152:65534 -j ACCEPT #iptables -t nat -A PREROUTING -p tcp -d 1.1.1.1 --dport 21 -j DNAT --to-destination 192.168.2.2:21 #iptables -A FORWARD -i eth0 -d 192.168.2.2 -p tcp --dport 21 -j ACCEPT #iptables -t nat -A PREROUTING -p tcp -d 1.1.1.1 --dport 49152:65534 -j DNAT --to-destination 192.168.2.2:49152-65534 #iptables -A FORWARD -i eth0 -d 192.168.2.2 -p tcp --dport 49152:65534 -j ACCEPT #$IPT -t nat -A PREROUTING -p tcp --dport 53 -i ${WAN} -j DNAT --to 10.10.0.4:53 #$IPT -A FORWARD -i $WAN -d 10.10.0.4 -j ACCEPT #$IPT -t nat -A PREROUTING -p tcp --dport 8080 -i ${WAN} -j DNAT --to 10.10.0.5:8080 #$IPT -A FORWARD -i $WAN -d 10.10.0.5 -j ACCEPT #$IPT -t nat -A PREROUTING -p tcp --dport 38397 -i ${WAN} -j DNAT --to 10.10.0.5:38397 #$IPT -t nat -A PREROUTING -p tcp --dport 4444 -i ${WAN} -j DNAT --to 10.10.0.5:4444 #$IPT -t nat -A PREROUTING -p tcp --dport 80 -i ${WAN} -j DNAT --to 10.10.0.7:80 #$IPT -A FORWARD -i $WAN -d 10.10.0.7 -j ACCEPT # \u0420\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u043c \u0434\u043e\u0441\u0442\u0443\u043f \u0438\u0437 \u043b\u043e\u043a\u0430\u043b\u043a\u0438 \u043d\u0430\u0440\u0443\u0436\u0443 $IPT -A FORWARD -i $LAN1 -o $WAN -j ACCEPT # \u0417\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0434\u043e\u0441\u0442\u0443\u043f \u0441\u043d\u0430\u0440\u0443\u0436\u0438 \u0432 \u043b\u043e\u043a\u0430\u043b\u043a\u0443 $IPT -A FORWARD -i $WAN -o $LAN1 -j REJECT # \u0412\u043a\u043b\u044e\u0447\u0430\u0435\u043c NAT $IPT -t nat -A POSTROUTING -o $WAN -s $LAN1_IP_RANGE -j MASQUERADE #$IPT -t nat -A POSTROUTING -o $WAN -s $LAN2_IP_RANGE -j MASQUERADE # \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0434\u043e\u0441\u0442\u0443\u043f \u043a SSH #$IPT -A INPUT -i $WAN -p tcp --dport 22 -j ACCEPT # \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043f\u043e\u0447\u0442\u043e\u0432\u043e\u043c\u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 #$IPT -A INPUT -p tcp -m tcp --dport 25 -j ACCEPT #$IPT -A INPUT -p tcp -m tcp --dport 465 -j ACCEPT #$IPT -A INPUT -p tcp -m tcp --dport 110 -j ACCEPT #$IPT -A INPUT -p tcp -m tcp --dport 995 -j ACCEPT #$IPT -A INPUT -p tcp -m tcp --dport 143 -j ACCEPT #$IPT -A INPUT -p tcp -m tcp --dport 993 -j ACCEPT #\u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0434\u043e\u0441\u0442\u0443\u043f \u043a web \u0441\u0435\u0440\u0432\u0435\u0440\u0443 #$IPT -A INPUT -p tcp -m tcp --dport 8080 -j ACCEPT #$IPT -A INPUT -p tcp -m tcp --dport 4444 -j ACCEPT #$IPT -A INPUT -p tcp -m tcp --dport 21 -j ACCEPT #$IPT -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT #\u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0434\u043e\u0441\u0442\u0443\u043f \u043a DNS \u0441\u0435\u0440\u0432\u0435\u0440\u0443 #$IPT -A INPUT -i $WAN -p udp --dport 53 -j ACCEPT # \u0412\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 #$IPT -N block_in #$IPT -N block_out #$IPT -N block_fw #$IPT -A INPUT -j block_in #$IPT -A OUTPUT -j block_out #$IPT -A FORWARD -j block_fw #$IPT -A block_in -j LOG --log-level info --log-prefix \"--IN--BLOCK\" #$IPT -A block_in -j DROP #$IPT -A block_out -j LOG --log-level info --log-prefix \"--OUT--BLOCK\" #$IPT -A block_out -j DROP #$IPT -A block_fw -j LOG --log-level info --log-prefix \"--FW--BLOCK\" #$IPT -A block_fw -j DROP /sbin/iptables-save > /etc/iptables.rules iptables -L -v -n","title":"Firewall"},{"location":"Linux/","text":"Debian 9 (stretch) dd sudo dd if=~/\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0438/debian-9.3.0-amd64-netinst.iso of=/dev/sdb dd if=/dev/zero of=ubuntufull.disk bs=1024k count=0 seek=10240 sed sudo sed -i \"/#.*/d\" /etc/keystone/keystone.conf \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u0440\u0435\u0448\u0435\u0442\u043a\u043e\u0439 sudo sed -i \"/^$/d\" /etc/keystone/keystone.conf \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 Display opened ports sudo netstat -ntulp Display all connections sudo lsof -i Based configuration You can use Debian Sources List Generator . Modify the data in the /etc/apt/sources.list file by new data. apt update && apt upgrade apt install sudo net-tools adduser [username] sudo or visudo + `username ALL=(ALL) ALL apt search [package_name] dpkg-reconfigure tzdata Set up command alias for some commands which are often used nano /etc/profile # add to the end alias ll='ls $LS_OPTIONS -l' alias l='ls $LS_OPTIONS -lA' alias rm='rm -i' alias cp='cp -i' alias mv='mv -i' and apply by command source /etc/profile Networking auto virbr0 iface virbr0 inet static address 10.10.0.1/24 bridge_ports eno1 apt install firmware-misc-nonfree - wi-fi driver auto wlo1 iface wlo1 inet dhcp wpa-essid [ssid] wpa-psk [passwd] Routes route add -net 10.10.0.0/24 dev mgmt1 route del -net 10.10.0.0/24 dev mgmt1 Troubleshooting If you get GnuPG errors like: GPG error: [..] Release: The following signatures couldn\u2019t be verified because the public key is not available: NO_PUBKEY [..] apt update 2>&1 | grep -o '[0-9A-Z]{16}$' | xargs - try auto update egrep -v '^#|^$' /etc/apt/sources.list{,.d/*.list} - try to find bad repo and do rm manually gpg --keyserver subkeys.pgp.net --recv KEY gpg --export --armor KEY | sudo apt-key add - or add the key manually /etc/apt/trusted.gpg - or just removing fuser -vki /var/lib/dpkg/lock - to fix error with /var/lib/apt/lists/lock - open","title":"Linux"},{"location":"Linux/#debian-9-stretch","text":"dd sudo dd if=~/\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0438/debian-9.3.0-amd64-netinst.iso of=/dev/sdb dd if=/dev/zero of=ubuntufull.disk bs=1024k count=0 seek=10240 sed sudo sed -i \"/#.*/d\" /etc/keystone/keystone.conf \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u0440\u0435\u0448\u0435\u0442\u043a\u043e\u0439 sudo sed -i \"/^$/d\" /etc/keystone/keystone.conf \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 Display opened ports sudo netstat -ntulp Display all connections sudo lsof -i","title":"Debian 9 (stretch)"},{"location":"Linux/#based-configuration","text":"You can use Debian Sources List Generator . Modify the data in the /etc/apt/sources.list file by new data. apt update && apt upgrade apt install sudo net-tools adduser [username] sudo or visudo + `username ALL=(ALL) ALL apt search [package_name] dpkg-reconfigure tzdata Set up command alias for some commands which are often used nano /etc/profile # add to the end alias ll='ls $LS_OPTIONS -l' alias l='ls $LS_OPTIONS -lA' alias rm='rm -i' alias cp='cp -i' alias mv='mv -i' and apply by command source /etc/profile","title":"Based configuration"},{"location":"Linux/#networking","text":"auto virbr0 iface virbr0 inet static address 10.10.0.1/24 bridge_ports eno1 apt install firmware-misc-nonfree - wi-fi driver auto wlo1 iface wlo1 inet dhcp wpa-essid [ssid] wpa-psk [passwd] Routes route add -net 10.10.0.0/24 dev mgmt1 route del -net 10.10.0.0/24 dev mgmt1","title":"Networking"},{"location":"Linux/#troubleshooting","text":"If you get GnuPG errors like: GPG error: [..] Release: The following signatures couldn\u2019t be verified because the public key is not available: NO_PUBKEY [..] apt update 2>&1 | grep -o '[0-9A-Z]{16}$' | xargs - try auto update egrep -v '^#|^$' /etc/apt/sources.list{,.d/*.list} - try to find bad repo and do rm manually gpg --keyserver subkeys.pgp.net --recv KEY gpg --export --armor KEY | sudo apt-key add - or add the key manually /etc/apt/trusted.gpg - or just removing fuser -vki /var/lib/dpkg/lock - to fix error with /var/lib/apt/lists/lock - open","title":"Troubleshooting"},{"location":"Mkdocs/","text":"Mkdocs mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. mkdocs gh-deploy - The best command. Just set up github things and run it","title":"Mkdocs"},{"location":"Mkdocs/#mkdocs","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. mkdocs gh-deploy - The best command. Just set up github things and run it","title":"Mkdocs"},{"location":"OvS/","text":"Basic configuration \u0424\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441, \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u044b\u0439 \u0432 ovs-sw0, \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c IP-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u0445 \u0434\u0440\u0443\u0433\u0438\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a. \u041e\u0434\u0438\u043d \u043a\u043e\u043c\u043c\u0443\u0442\u0430\u0442\u043e\u0440 \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u043f\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f OvS \u0441\u0432\u0438\u0447\u0435\u043c STP \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u0431\u0443\u0434\u0443\u0442 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u044b. ovs-vsctl add-br ovs-sw0 ovs-vsctl add-port ovs-sw0 eth0 ovs-vsctl add-port ovs-sw0 mgmt0 ovs-vsctl set interface mgmt0 type=internal ovs-vsctl show nano /etc/network/interfaces auto lo iface lo inet loopback auto enp1s0 iface enp1s0 inet manual allow-hotplug mgmt0 iface mgmt0 inet static address pub_ip/27 gateway pub_gw dns-nameservers 77.88.8.8 allow-hotplug mgmt1 iface mgmt1 inet static address 10.10.0.1/24 ovs-vsctl list-br ovs-vsctl list-ports ovs-sw0 ovs-vsctl del-port ovs-sw0 mgmt0 ovs-vsctl del-br ovs-sw0 VLAN ovs-vsctl set port <\u0438\u043c\u044f_\u043f\u043e\u0440\u0442\u0430> tag=10 ovs-vsctl add-br sw0-vlan10 ovs-sw0 10 \u0420\u0430\u0437\u0440\u0435\u0448\u0438\u043c \u043f\u043e\u0440\u0442\u0443 eth0 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0432\u043e \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u043c\u0438\u0440 \u0442\u0440\u0430\u0444\u0438\u043a \u0438\u0437 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 VLAN-\u043e\u0432: ovs-vsctl set port eth0 trunks=100,200,300 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430: ovs-vsctl list port eth0 \u041f\u043e\u0438\u0441\u043a \u043f\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e vlan: ovs-vsctl find port tag=100 \u0410\u0433\u0440\u0435\u0433\u0438\u0440\u0443\u0435\u043c \u043b\u0438\u043d\u043a\u0438 (LACP) ovs-vsctl add-bond <\u0438\u043c\u044f_\u043a\u043e\u043c\u043c\u0443\u0442\u0430\u0442\u043e\u0440\u0430> <\u0438\u043c\u044f_\u043d\u043e\u0432\u043e\u0433\u043e_bonda> <\u0441\u043f\u0438\u0441\u043e\u043a_\u0444\u0438\u0437.\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432> ovs-vsctl add-bond ovs-sw0 bond0 eth0 eth1 ovs-vsctl set port bond0 lacp=active ovs-appctl lacp/show <bond-\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441> Mirroring ovs-vsctl -- set Bridge xenbr1 mirrors=@m \\ -- --id=@enp1s0 get Port enp1s0 \\ -- --id=@mirror1 get Port mirror1 \\ -- --id=@m create Mirror name=enp1s0-mirror select-dst-port=@enp1s0 \\ select-src-port=@enp1s0 output-port=@mirror1","title":"OvS"},{"location":"OvS/#basic-configuration","text":"\u0424\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441, \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u044b\u0439 \u0432 ovs-sw0, \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c IP-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u0445 \u0434\u0440\u0443\u0433\u0438\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a. \u041e\u0434\u0438\u043d \u043a\u043e\u043c\u043c\u0443\u0442\u0430\u0442\u043e\u0440 \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u043f\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f OvS \u0441\u0432\u0438\u0447\u0435\u043c STP \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u0431\u0443\u0434\u0443\u0442 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u044b. ovs-vsctl add-br ovs-sw0 ovs-vsctl add-port ovs-sw0 eth0 ovs-vsctl add-port ovs-sw0 mgmt0 ovs-vsctl set interface mgmt0 type=internal ovs-vsctl show nano /etc/network/interfaces auto lo iface lo inet loopback auto enp1s0 iface enp1s0 inet manual allow-hotplug mgmt0 iface mgmt0 inet static address pub_ip/27 gateway pub_gw dns-nameservers 77.88.8.8 allow-hotplug mgmt1 iface mgmt1 inet static address 10.10.0.1/24 ovs-vsctl list-br ovs-vsctl list-ports ovs-sw0 ovs-vsctl del-port ovs-sw0 mgmt0 ovs-vsctl del-br ovs-sw0","title":"Basic configuration"},{"location":"OvS/#vlan","text":"ovs-vsctl set port <\u0438\u043c\u044f_\u043f\u043e\u0440\u0442\u0430> tag=10 ovs-vsctl add-br sw0-vlan10 ovs-sw0 10 \u0420\u0430\u0437\u0440\u0435\u0448\u0438\u043c \u043f\u043e\u0440\u0442\u0443 eth0 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0432\u043e \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u043c\u0438\u0440 \u0442\u0440\u0430\u0444\u0438\u043a \u0438\u0437 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 VLAN-\u043e\u0432: ovs-vsctl set port eth0 trunks=100,200,300 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430: ovs-vsctl list port eth0 \u041f\u043e\u0438\u0441\u043a \u043f\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e vlan: ovs-vsctl find port tag=100","title":"VLAN"},{"location":"OvS/#lacp","text":"ovs-vsctl add-bond <\u0438\u043c\u044f_\u043a\u043e\u043c\u043c\u0443\u0442\u0430\u0442\u043e\u0440\u0430> <\u0438\u043c\u044f_\u043d\u043e\u0432\u043e\u0433\u043e_bonda> <\u0441\u043f\u0438\u0441\u043e\u043a_\u0444\u0438\u0437.\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432> ovs-vsctl add-bond ovs-sw0 bond0 eth0 eth1 ovs-vsctl set port bond0 lacp=active ovs-appctl lacp/show <bond-\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441>","title":"\u0410\u0433\u0440\u0435\u0433\u0438\u0440\u0443\u0435\u043c \u043b\u0438\u043d\u043a\u0438 (LACP)"},{"location":"OvS/#mirroring","text":"ovs-vsctl -- set Bridge xenbr1 mirrors=@m \\ -- --id=@enp1s0 get Port enp1s0 \\ -- --id=@mirror1 get Port mirror1 \\ -- --id=@m create Mirror name=enp1s0-mirror select-dst-port=@enp1s0 \\ select-src-port=@enp1s0 output-port=@mirror1","title":"Mirroring"},{"location":"SSH/","text":"key generation ssh-keygen -t ecdsa ssh tunnel ssh -L PORT:localhost:PORT HOSTNAME","title":"SSH"},{"location":"xen/","text":"Xen installation Install xen and set up grub priority. Check the virtualization extensions. If not already enabled in BIOS, enable it. apt-get install xen-system-amd64 xen-tools mv -i /etc/grub.d/20_linux_xen /etc/grub.d/08_linux_xen update-grub xl dmesg | grep VMX We also can prepare lvm partition apt-get install lvm2 vgcreate vg0 /dev/sda7 Configure the mirrors.conf and xen-tools.conf files as needed. If OvS is used then nano xl.conf vif.default.script=\"vif-openvswitch\" vif.default.bridge=\"xenbr0\" Some xen commands: xl list xl create /etc/xen/<hostname>.cfg xl console <hostname> xl restart <hostname> xen-delete-image VMs_name --lvm=vg01 xl network-list <hostname> Create PV DomU using xen-tools: xen-create-image --hostname=$guest --ip x.x.x.x --netmask x.x.x.x --gateway x.x.x.x --vcpus 2 --dist stretch xen-create-image --hostname=$guest --memory=2gb --vcpus=2 --lvm=vg0 --dhcp --pygrub --dist=stretch Create HVM DomU manually: lvcreate -n name -L 20G lvmgroup nano /etc/xen/web.cfg builder = \"hvm\" name = \"web-hvm\" memory = \"2048\" vcpus = 2 vif = [ 'script=vif-openvswitch,bridge=xenbr0' ] disk = ['phy:/dev/vg0/web,hda,w','file:/srv/share/ubuntu-14.04.1-server-amd64.iso,hdc:cdrom,r'] #disk = ['phy:/dev/vg0/web,hda,w'] vnc = 1 #boot=\"c\" boot=\"dc\" Cold Migration xl save <domain id> <savefile> scp <savefile> <target.domain.tld:/path/> xl restore <savefile> Live Migration nano /etc/xen/xend-config.sxp (xend-relocation-server yes) /etc/init.d/xend restart xl migrate <domain id> <destination machine> HA Cluster xl remus -F -n -d 6 10.10.0.20","title":"Xen"},{"location":"xen/#xen-installation","text":"Install xen and set up grub priority. Check the virtualization extensions. If not already enabled in BIOS, enable it. apt-get install xen-system-amd64 xen-tools mv -i /etc/grub.d/20_linux_xen /etc/grub.d/08_linux_xen update-grub xl dmesg | grep VMX We also can prepare lvm partition apt-get install lvm2 vgcreate vg0 /dev/sda7 Configure the mirrors.conf and xen-tools.conf files as needed. If OvS is used then nano xl.conf vif.default.script=\"vif-openvswitch\" vif.default.bridge=\"xenbr0\" Some xen commands: xl list xl create /etc/xen/<hostname>.cfg xl console <hostname> xl restart <hostname> xen-delete-image VMs_name --lvm=vg01 xl network-list <hostname> Create PV DomU using xen-tools: xen-create-image --hostname=$guest --ip x.x.x.x --netmask x.x.x.x --gateway x.x.x.x --vcpus 2 --dist stretch xen-create-image --hostname=$guest --memory=2gb --vcpus=2 --lvm=vg0 --dhcp --pygrub --dist=stretch Create HVM DomU manually: lvcreate -n name -L 20G lvmgroup nano /etc/xen/web.cfg builder = \"hvm\" name = \"web-hvm\" memory = \"2048\" vcpus = 2 vif = [ 'script=vif-openvswitch,bridge=xenbr0' ] disk = ['phy:/dev/vg0/web,hda,w','file:/srv/share/ubuntu-14.04.1-server-amd64.iso,hdc:cdrom,r'] #disk = ['phy:/dev/vg0/web,hda,w'] vnc = 1 #boot=\"c\" boot=\"dc\"","title":"Xen installation"},{"location":"xen/#cold-migration","text":"xl save <domain id> <savefile> scp <savefile> <target.domain.tld:/path/> xl restore <savefile>","title":"Cold Migration"},{"location":"xen/#live-migration","text":"nano /etc/xen/xend-config.sxp (xend-relocation-server yes) /etc/init.d/xend restart xl migrate <domain id> <destination machine>","title":"Live Migration"},{"location":"xen/#ha-cluster","text":"xl remus -F -n -d 6 10.10.0.20","title":"HA Cluster"}]}